name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.24'
  CNPG_VERSION: '1.24.3'

jobs:
  test:
    name: Unit Tests and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.sum

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: v1.64.8
          skip-cache: false
          args: --timeout=5m

      - name: Run unit tests
        run: make test

      - name: Verify generated manifests
        run: |
          make generate manifests
          git diff --exit-code || (echo "Generated files are out of date. Run 'make generate manifests' and commit the changes." && exit 1)

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: go.sum

      - name: Create Kind cluster
        uses: helm/kind-action@v1.10.0
        with:
          version: v0.24.0
          node_image: kindest/node:v1.31.2
          cluster_name: pg-operator-test
          config: .github/kind-config.yaml

      - name: Install CloudNativePG Operator
        run: |
          kubectl apply -f https://raw.githubusercontent.com/cloudnative-pg/cloudnative-pg/release-${{ env.CNPG_VERSION }}/releases/cnpg-${{ env.CNPG_VERSION }}.yaml
          kubectl wait --for=condition=Available deployment/cnpg-controller-manager -n cnpg-system --timeout=300s

      - name: Create PostgreSQL cluster
        run: |
          kubectl apply -f test/e2e/manifests/postgres-cluster.yaml
          kubectl wait --for=condition=Ready cluster/postgres-cluster --timeout=600s

      - name: Load operator image into Kind
        run: |
          docker pull ghcr.io/${{ github.repository }}:${{ github.sha }}
          kind load docker-image ghcr.io/${{ github.repository }}:${{ github.sha }} --name pg-operator-test

      - name: Deploy operator
        run: |
          export IMG=ghcr.io/${{ github.repository }}:${{ github.sha }}
          make install
          make deploy

      - name: Wait for operator to be ready
        run: |
          kubectl wait --for=condition=Available deployment/operator-controller-manager -n operator-system --timeout=300s

      - name: Run e2e tests
        run: |
          export USE_EXISTING_CLUSTER=true
          make test-e2e

      - name: Collect logs on failure
        if: failure()
        run: |
          echo "=== Operator logs ==="
          kubectl logs -l control-plane=controller-manager -n operator-system --tail=100
          echo "=== CNPG logs ==="
          kubectl logs -l app.kubernetes.io/name=cloudnative-pg -n cnpg-system --tail=100
          echo "=== PostgreSQL cluster status ==="
          kubectl describe cluster postgres-cluster
          echo "=== PostgreSQL pod logs ==="
          kubectl logs -l cnpg.io/cluster=postgres-cluster --tail=50